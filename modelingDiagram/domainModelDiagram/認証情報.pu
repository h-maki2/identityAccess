@startuml 認証情報関連

title 認証情報関連

package "認証情報集約(Aggregation)" {
    class "AuthenticationInformaion\n認証情報" as AuthenticationInformaion << (R,red) RootEntity >> {
        userId: UserId
        email: Email
        password: Password
        verificationStatus 確認済みステータス: VerificationStatus
        loginRestriction ログイン制限: LoginRestriction
    }

    class UserId {
        - value: string
    }

    class UserEmail {
        - value: string
    }

    class UserPassword {
        - value: string
    }

    class "VerificationStatus\n確認済みステータス" as VerificationStatus {
        + value: Enum { verified(確認済み), unverified(未確認)}
    }

    class "LoginRestriction\nログイン制限" as LoginRestriction {
        - failedLoginCount ログイン失敗回数: FailedLoginCount
        - loginRestrictionStatus ログイン制限ステータス: LoginRestrictionStatus
        - nextLoginAllowedAt 次回ログイン可能日時: NextLoginAllowedAt
    }

    class "LoginRestrictionStatus\nログイン制限ステータス" as LoginRestrictionStatus {
        + value: Enum { restricted(制限中), unrestricted(制限なし)}
    }

    class "FailedLoginCount\nログイン失敗回数" as FailedLoginCount {
        - value: int
    }

    class "NextLoginAllowedAt\n次回ログイン可能日時" as NextLoginAllowedAt {
        - value: DatetimeImutable
    }

    note bottom of AuthenticationInformaion
        「認証済みの有無」が「認証済み」の場合のみ、ログインが行える
    end note

    note bottom of UserId
        userIdはULIDやUUIDv7などの時系列ソート可能なIDを用いる
    end note

    note bottom of VerificationStatus
        認証確認メールでの認証が済んだら「認証済み」になる 
    end note

    note bottom of Password
        ・パスワードはArgon2アルゴリズムを用いてハッシュ化する
        ・ステータスが「認証済み」の場合のみパスワードの変更が行える
        ・nextTask: パスワードを変更したときにメールを送信する
    end note

    note bottom of Email
        ・重複したメールアドレスは存在しない
        ・255文字以内
    end note

    note bottom of FailedLoginCount
        ・0以上10以下の整数
        ・ログインに失敗した回数が10回を超えると、ログイン制限がかかる
    end note

    note bottom of NextLoginAllowedAt
        ・ログイン制限がかかった場合、次回ログイン可能日時が設定される
        ・ログイン制限が解除された場合、次回ログイン可能日時はnullになる
        ・ログイン制限は10分間
    end note

    note bottom of LoginRestrictionStatus
        ・ログイン制限がかかった場合、ログイン制限ステータスが「制限中」になる
        ・ログイン制限が解除された場合、ログイン制限ステータスが「制限なし」になる
    end note

    AuthenticationInformaion *-down- UserId
    AuthenticationInformaion *-down- UserName
    AuthenticationInformaion *-down- UserEmail
    AuthenticationInformaion *-down- UserPassword
    AuthenticationInformaion *-down- VerificationStatus
}

package "認証確認(AuthenticationConfirmation)" {
    class "AuthenticationConfirmation\n認証確認" as AuthenticationConfirmation {
        temporarytoken: Temporarytoken
        userId: UserId
    }

    class "TemporaryToken\n一時トークン" as Temporarytoken {
        - value: string
        - temporaryTokenEffectiveDate: TemporaryTokenEffectiveDate
    }

    class "TemporaryTokenEffectiveDate\n一時トークンの有効期限" as TemporaryTokenEffectiveDate {
        - value: DatetimeImutable
    }

    note bottom of Temporarytoken
        ・認証確認URLのクエリパラメータに追加される
        ・認証確認が済んだら削除する
        ・有効期限は24時間
    end note

    AuthenticationConfirmation *-down- Temporarytoken
    AuthenticationConfirmation -down-> AuthenticationInformaion.UserId
}

@enduml